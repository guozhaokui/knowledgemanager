
要求
	文件的
		可以非常大
		能比较快的检索到
	内存的
		是文件的一个缓存，速度快，容量有限
		有价值的会修改文件
结构
	存储结构为扁平的，但是实际有不同的层级
	对于汉字来说可以有一个每个字的数据
		即后面跟某个字的时候
	node1
		什么不接的时候 x% 为xx
		接 node2 的时候 x% 为node3
	...
	
	总有一个 '不知道' 的node， 用来动态扩展用的
	
	怎么描述所有node的关系
		总联系需要限制，不重要的联系会慢慢消失
	
thunk mem	
	size=1M
	init
		random
		
		
记忆模块
	需要记住最近几次的句子，因为结合新的信息有时候可以弥补以前的错误的理解
	
怎么才算理解
	设 迷惑度为 c
		当为0的时候为完全理解，或者没什么新奇的感兴趣的内容。
		可能性很多的时候会迷惑？
	1.	
		我好困啊
		昨天没睡好觉
	2.请给我打一个dcc好么
	3.你把插件语言好看
	4.你好。你好。你好。你好。
		
	只有理解了的句子才会有效的放到记忆中
		也能有效的减少存储需求

怎么触发行动
	可定义
	假设为 c1 && c2 && ... && cn 
		的时候 是 行动1的概率
记录查找
	从不断记录的信息中根据一点点记忆来索引出来
		特征匹配
		只要加上结果后，两句话就非常相似
			怎么判断两句话的相似性
				替换代价
	
怎么猜
	例如已知信息为s的概率最大
		为了让他的概率进一步变大，需要假设某个元素e为x，然后判断e为各种的概率
			
请		
请客
请假
有请

打包
打
打架
打扫

学习新词的过程

种类
	单词
	人名
	某个人
	
	
worker	
	1.打招呼
		say('你好:n1% name:n2%');
		say的
			-->save()
		
	